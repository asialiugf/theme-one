set mouse-=a
let mapleader = "\<Space>"
"let mapleader = ','
nnoremap <leader>p :set paste<CR>
nnoremap <leader>pp :set nopaste<CR>

" :CocInstall coc-json coc-clangd  " install coc.nivim plugin
call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
Plug 'Yggdroot/indentLine'
" ---- Plug 'itchyny/lightline.vim'
" ---- Plug 'crusoexia/vim-monokai'
Plug 'luochen1990/rainbow'
Plug 'asialiugf/vim-one'
" ---- Plug 'liuchengxu/space-vim-dark'
" ---- Plug 'bfrg/vim-cpp-modern'
"Plug 'conweller/findr.vim'
" ---- Plug 'liuchengxu/vim-clap'
Plug 'liuchengxu/vista.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'skywind3000/vim-preview'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
Plug 'vim-airline/vim-airline'  " tabs + 状态栏   :bdelete 关闭缓冲
Plug 'vim-airline/vim-airline-themes' "airline 的主题
Plug 'scrooloose/nerdcommenter'  "注释行处理
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'  "自动配对 {} ()  []
"Plug 'Shougo/echodoc.vim' "参数提示不管用
" ---- Plug 'kana/vim-textobj-user'
" ---- Plug 'kana/vim-textobj-indent'
" ---- Plug 'kana/vim-textobj-syntax'
" ---- Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
" ---- Plug 'sgur/vim-textobj-parameter'

"if has('nvim')
"  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
"else
"  Plug 'Shougo/defx.nvim'
"  Plug 'roxma/nvim-yarp'
"  Plug 'roxma/vim-hug-neovim-rpc'
"  Plug 'kristijanhusak/defx-icons'
"endif
call plug#end()

set fillchars=vert:⎸
highlight VertSplit ctermbg=240 ctermfg=0
" hi VertSplit guibg=red

"hi LineNr guibg=bg
"set foldcolumn=1
"hi foldcolumn guibg=bg
"hi VertSplit guibg=bg guifg=bg

"----------------------------------------------------------------------------
"   Plug 'Shougo/defx.nvim'
"----------------------------------------------------------------------------
" --- call defx#custom#option('_', {
" ---       \ 'winwidth': 30,
" ---       \ 'split': 'vertical',
" ---       \ 'direction': 'topleft',
" ---       \ 'show_ignored_files': 0,
" ---       \ 'buffer_name': '',
" ---       \ 'toggle': 1,
" ---       \ 'resume': 1
" ---       \ })

"----------------------------------------------------------------------------
"  Plug 'liuchengxu/vim-clap'
"----------------------------------------------------------------------------
" --- nnoremap <silent><nowait> <space>op :<C-u>Clap<CR>
" --- nnoremap <silent><nowait> <space>ob :<C-u>Clap buffers<CR>
" --- nnoremap <silent><nowait> <space>oc :<C-u>Clap command<CR>
" --- nnoremap <silent><nowait> <space>oh :<C-u>Clap history<CR>
" --- nnoremap <silent><nowait> <space>of :<C-u>Clap files ++finder=rg --ignore --hidden --files<CR>
" --- nnoremap <silent><nowait> <space>oq :<C-u>Clap quickfix<CR>
" --- nnoremap <silent><nowait> <space>oj :<C-u>Clap jumps<CR>
" --- nnoremap <silent><nowait> <space>om :<C-u>Clap marks<CR>
" --- nnoremap <silent><nowait> <space>ow :<C-u>Clap windows<CR>
" --- nnoremap <silent><nowait> <space>ot :<C-u>Clap tags<CR>
" --- nnoremap <silent><nowait> <space>os :<C-u>Clap colors<CR>
" --- nnoremap <silent><nowait> <space>og :<C-u>Clap grep2<CR>
" --- let g:which_key_map =  {}
" --- let g:which_key_map.o = {
" --- \ 'name' : '+clap',       'p' : 'clap',          'b' : 'buffers',
" --- \ 'c' : 'command',        'h' : 'file history',  'f' : 'search file',
" --- \ 'q' : 'quickfix list',  'j' : 'jumps',         'm' : 'marks',            'w' : 'windows',
" --- \ 't' : 'tags',           's' : 'colors',        'g' : 'find word', }

"----------------------------------------------------------------------------
"  Plug 'liuchengxu/vista.vim'
"----------------------------------------------------------------------------
let g:vista_sidebar_position  = 'vertical topleft'
" let g:vista_sidebar_position  = 'vertical botright'
let g:vista_sidebar_width = '40'
let g:vista#renderer#enable_icon = 1
" The default icons can't be suitable for all the filetypes, you can extend it as you wish.
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
"noremap <silent> <leader>vf :Vista <C-R><C-W><cr>
noremap <silent> <leader>vv :Vista <cr>
noremap <silent> <leader>vq :Vista! <cr>

"----------------------------------------------------------------------------
"  Plug 'scrooloose/nerdcommenter'  "注释行处理
"----------------------------------------------------------------------------
"add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" python 自动的会多加一个空格
au FileType python let g:NERDSpaceDelims = 0
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1


"----------------------------------------------------------------------------
"  'vim-airline/vim-airline' 'vim-airline/vim-airline-themes' "airline 的主题
"----------------------------------------------------------------------------
" 设置状态栏
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_theme = 'desertink'  " 主题
let g:airline#extensions#keymap#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#buffer_idx_format = {
       \ '0': '0 ',
       \ '1': '1 ',
       \ '2': '2 ',
       \ '3': '3 ',
       \ '4': '4 ',
       \ '5': '5 ',
       \ '6': '6 ',
       \ '7': '7 ',
       \ '8': '8 ',
       \ '9': '9 '
       \}
" 设置切换tab的快捷键 <\> + <i> 切换到第i个 tab
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
" 设置切换tab的快捷键 <\> + <-> 切换到前一个 tab
nmap <leader>- <Plug>AirlineSelectPrevTab
" 设置切换tab的快捷键 <\> + <+> 切换到后一个 tab
nmap <leader>+ <Plug>AirlineSelectNextTab
" 设置切换tab的快捷键 <\> + <q> 退出当前的 tab
nmap <leader>q :bp<cr>:bd #<cr>
" 修改了一些个人不喜欢的字符
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = "CL" " current line
let g:airline_symbols.whitespace = '|'
let g:airline_symbols.maxlinenr = 'Ml' "maxline
let g:airline_symbols.branch = 'BR'
let g:airline_symbols.readonly = "RO"
let g:airline_symbols.dirty = "DT"
let g:airline_symbols.crypt = "CR"
"----------------------------------------------------------------------------

"----------------------------------------------------------------------------
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
" let g:gutentags_cache_dir = expand('~/.cache/tags')
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0


" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1
" 0 or s: Find this symbol
" 1 or g: Find this definition
" 2 or d: Find functions called by this function
" 3 or c: Find functions calling this function
" 4 or t: Find this text string
" 6 or e: Find this egrep pattern
" 7 or f: Find this file
" 8 or i: Find files #including this file
" 9 or a: Find places where this symbol is assigned a value
noremap <silent> <leader>gs :GscopeFind s <C-R><C-W><cr>
noremap <silent> <leader>gg :GscopeFind g <C-R><C-W><cr>
noremap <silent> <leader>gc :GscopeFind c <C-R><C-W><cr>
noremap <silent> <leader>gt :GscopeFind t <C-R><C-W><cr>
noremap <silent> <leader>ge :GscopeFind e <C-R><C-W><cr>
noremap <silent> <leader>gf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
noremap <silent> <leader>ga :GscopeFind a <C-R><C-W><cr>
noremap <silent> <leader>gz :GscopeFind z <C-R><C-W><cr>
" 配合 preview， 执行 GscopeFind s，会将自取光标所在的单词，进行查找，并在
" quickfix 中显示。 1、 直接回车，相应的文件会在主窗口打开。 2、小写p，打
" 开新窗口。 3、大写P，关闭新的窗口。


"----------------------------------------------------------------------------
"  Plug 'skywind3000/vim-preview' configure
"----------------------------------------------------------------------------
noremap <m-u> :PreviewScroll -1<cr>
noremap <m-d> :PreviewScroll +1<cr>
inoremap <m-u> <c-\><c-o>:PreviewScroll -1<cr>
inoremap <m-d> <c-\><c-o>:PreviewScroll +1<cr>

autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>


"----------------------------------------------------------------------------
"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
"let mapleader = ' '
"nnoremap <C-l> gt
"nnoremap <C-h> gT
"nnoremap <leader>t :tabe<CR>"
"----------------------------------------------------------------------------


"----------------------------------------------------------------------------
"   Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
"----------------------------------------------------------------------------
let g:Lf_HideHelp = 1
" echo g:Lf_fuzzyEngine_C
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.root'] " '.svn', '.hg', '.project',
"------
if has('nvim')
    let s:cachedir = expand(stdpath('cache'))
    let s:configdir = expand(stdpath('config'))
else
    "vim will share same folder with nvim
    if has('win32')
        let s:cachedir = expand('~/AppData/Local/Temp/cache/nvim')
        let s:configdir = expand('~/AppData/Local/nvim')
    else
        let s:cachedir = expand('~/.cache/nvim')
        let s:configdir = expand('~/.config/nvim')
    endif
endif
let g:Lf_Ctags="uctags"
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']
let g:Lf_UseVersionControlTool=1 "default value, can ignore
let g:Lf_DefaultExternalTool='rg'
let g:Lf_PreviewInPopup = 1
let g:Lf_WindowHeight = 0.40
let g:Lf_CacheDirectory = s:cachedir
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {
        \ 'File': 0,
        \ 'Buffer': 0,
        \ 'Mru': 0,
        \ 'Tag': 0,
        \ 'BufTag': 1,
        \ 'Function': 1,
        \ 'Line': 1,
        \ 'Colorscheme': 0,
        \ 'Rg': 0,
        \ 'Gtags': 0
        \}
let g:Lf_RgStorePattern="r"
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_GtagsSource = 1

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<c-l>'
noremap <leader>f :LeaderfSelf<cr>
noremap <leader>fm :LeaderfMru<cr>
noremap <leader>ff :LeaderfFunction<cr>
noremap <leader>fb :LeaderfBufTagAll<cr>
noremap <leader>ft :LeaderfBufTag<cr>
noremap <leader>fl :LeaderfLine<cr>
noremap <leader>fw :LeaderfWindow<cr>

" --- nmap <unique> <leader>fr <Plug>LeaderfRgPrompt
" --- nmap <unique> <leader>fra <Plug>LeaderfRgCwordLiteralNoBoundary
" --- nmap <unique> <leader>frb <Plug>LeaderfRgCwordLiteralBoundary
" --- nmap <unique> <leader>frc <Plug>LeaderfRgCwordRegexNoBoundary
" --- nmap <unique> <leader>frd <Plug>LeaderfRgCwordRegexBoundary

" --- vmap <unique> <leader>fra <Plug>LeaderfRgVisualLiteralNoBoundary
" --- vmap <unique> <leader>frb <Plug>LeaderfRgVisualLiteralBoundary
" --- vmap <unique> <leader>frc <Plug>LeaderfRgVisualRegexNoBoundary
" --- vmap <unique> <leader>frd <Plug>LeaderfRgVisualRegexBoundary

" --- nmap <unique> <leader>fgd <Plug>LeaderfGtagsDefinition
" --- nmap <unique> <leader>fgr <Plug>LeaderfGtagsReference
" --- nmap <unique> <leader>fgs <Plug>LeaderfGtagsSymbol
" --- nmap <unique> <leader>fgg <Plug>LeaderfGtagsGrep

" --- vmap <unique> <leader>fgd <Plug>LeaderfGtagsDefinition
" --- vmap <unique> <leader>fgr <Plug>LeaderfGtagsReference
" --- vmap <unique> <leader>fgs <Plug>LeaderfGtagsSymbol
" --- vmap <unique> <leader>fgg <Plug>LeaderfGtagsGrep

" --- noremap <leader>fgo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
" --- noremap <leader>fgn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
" --- noremap <leader>fgp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

"----------------------------------------------------------------------------


if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set t_Co=256
set t_ut=n

set ts=4
set expandtab
set autoindent
set softtabstop=4
set shiftwidth=4
set autoindent
:%retab!

let g:cpp_function_highlight = 1
let g:cpp_attributes_highlight = 1
let g:cpp_member_highlight = 1
let g:cpp_simple_highlight = 1

set noshowmode
"set noruler
set laststatus=2
"set noshowcmd
"set shortmess=F




" syntax on
" colorscheme onedark
" let g:airline_theme='one'
colorscheme one
" let g:space_vim_dark_background = 255
" colorscheme space-vim-dark
" colorscheme monokai
" colorscheme moonfly
" colorscheme zenesque
" colorscheme rainbow_fruit
" colorscheme winter
" colorscheme yeller
"colorscheme murphy
" colorscheme winter
" colorscheme vividchalk
" colorscheme papaya
" colorscheme vc
" colorscheme vchalk



"hi Comment cterm=italic
hi Normal     ctermbg=NONE guibg=NONE
hi LineNr     ctermbg=NONE guibg=NONE
hi SignColumn ctermbg=NONE guibg=NONE
" set background=dark " for the dark version
" highlight String ctermbg=NONE ctermfg=107 guibg=NONE guifg=#95B47B
"
"
"
" syntax enable
 set re=1
 set lazyredraw
 set synmaxcol=128
 syntax sync minlines=256

"----------------------------------------------------------------------------
"   Plug 'Yggdroot/indentLine'              indentLine  ¦, ┆, │, ⎸, or ▏
"----------------------------------------------------------------------------
let g:indentLine_enabled = 1
let g:indentLine_setColors = 1
let g:indentLine_color_term = 239
let g:indentLine_char = '⎸'
"let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
let g:indent_guides_start_level           = 2  " 从第二"层开始可视化显示缩进
"----------------------------------------------------------------------------


"----------------------------------------------------------------------------
"   Plug 'dense-analysis/ale'  configure
"----------------------------------------------------------------------------
let g:airline#extensions#ale#enabled = 1
highlight clear signcolumn
let g:ale_linters_explicit = 1
"\   'csh': ['shell'],
"\   'zsh': ['shell'],
"\   'go': ['gofmt', 'golint'],
"\   'python': ['flake8', 'mypy', 'pylint'],
"\   'text': [],
let g:ale_linters = {
\   'c': ['gcc', 'cppcheck'],
\   'cpp': ['cc','cppcheck'],
\}
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1

let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_fix_on_save = 1
let g:ale_disable_lsp = 1   " 不用 ale 补全，采用 coc.nvim 来补全

let g:ale_c_cc_executable = '<auto>'        " default
let g:ale_c_cc_options = '-std=c11 -Wall'   " default
let g:ale_c_cppcheck_options = ''

let g:ale_cpp_cc_executable = '<auto>'        " default  first:clang++ then: gcc
let g:ale_cpp_cc_options = '-std=c++11 -Wall' " default
let g:ale_cpp_cppcheck_options = ''

" --- :ALEInfo for more info 查看更多信息

" 格式化
let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'c': ['clang-format'],
\  'cpp': ['clang-format'],
\  'html': ['prettier'],
\  'javascript': ['prettier_standard'],
\  'php': ['php_cs_fixer', 'phpcbf'],
\}
"nmap <silent> <leader>aj :ALENext<cr>
"nmap <silent> <leader>ak :ALEPrevious<cr>
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

"----------------------------------------------------------------------------

" 设置字符集编码，默认使用utf8
set encoding=utf8
set fileencodings=utf8,gb2312,gb18030,ucs-bom,latin1

set noswapfile      " 不使用swp文件，注意，错误退出后无法恢复
set lbr             " 在breakat字符处而不是最后一个字符处断行
set ai              " 自动缩进
set si              " 智能缩进
set cindent         " C/C++风格缩进

" -------------------------------------------------------------------------------

set signcolumn=yes
highlight clear signcolumn

"--------------------------------------------------------------------------------
"    rainbow_active seting
"--------------------------------------------------------------------------------
"\'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
"\'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
"\'operators': ['_,\|+\|-\|*\|/\|=\|==\|&\|===\|!==_'],
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
\'ctermfgs': ['blue', 'Darkyellow', 'DarkMagenta', 'Darkred'],
\'operators': ['_,\|=_'],
\'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\'separately': {
\	'*': {},
\	'tex': {'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],},
\	'lisp': {'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],},
\	'vim': {'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold',
\           'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody',
\           'start=/{/ end=/}/ fold containedin=vimFuncBody'],},
\	'css': 0,
\},
\}
"--------------------------------------------------------------------------------
