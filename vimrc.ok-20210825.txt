if has("gui_running")
    echo "yes, we have a GUI"
else
"    echo "Boring old console"
endif
let mapleader = "\<Space>"
nnoremap <leader>p :set paste<CR>
nnoremap <leader>pp :set nopaste<CR>

" :CocInstall coc-json coc-clangd  " install coc.nivim plugin
call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
"Plug 'Yggdroot/indentLine'
Plug 'itchyny/lightline.vim'
"Plug 'crusoexia/vim-monokai'
Plug 'luochen1990/rainbow'
Plug 'rakr/vim-one'
Plug 'liuchengxu/space-vim-dark'
"Plug 'bfrg/vim-cpp-modern'
"Plug 'conweller/findr.vim'
"Plug 'liuchengxu/vim-clap'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'skywind3000/vim-preview'
Plug 'ludovicchabant/vim-gutentags'
call plug#end()


"----------------------------------------------------------------------------
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0
"----------------------------------------------------------------------------



"----------------------------------------------------------------------------
"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
"let mapleader = ' '
"nnoremap <C-l> gt
"nnoremap <C-h> gT
"nnoremap <leader>t :tabe<CR>"
"----------------------------------------------------------------------------


"----------------------------------------------------------------------------
"   Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
"----------------------------------------------------------------------------
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_HideHelp = 1
" echo g:Lf_fuzzyEngine_C
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']
"------
if has('nvim')
    let s:cachedir = expand(stdpath('cache'))
    let s:configdir = expand(stdpath('config'))
else
    "vim will share same folder with nvim
    if has('win32')
        let s:cachedir = expand('~/AppData/Local/Temp/cache/nvim')
        let s:configdir = expand('~/AppData/Local/nvim')
    else
        let s:cachedir = expand('~/.cache/nvim')
        let s:configdir = expand('~/.config/nvim')
    endif
endif
let g:Lf_Ctags="uctags"
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']
let g:Lf_UseVersionControlTool=1 "default value, can ignore
let g:Lf_DefaultExternalTool='rg'
let g:Lf_PreviewInPopup = 1
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = s:cachedir
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {
        \ 'File': 0,
        \ 'Buffer': 0,
        \ 'Mru': 0,
        \ 'Tag': 0,
        \ 'BufTag': 1,
        \ 'Function': 1,
        \ 'Line': 1,
        \ 'Colorscheme': 0,
        \ 'Rg': 0,
        \ 'Gtags': 0
        \}
let g:Lf_RgStorePattern="r"
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_GtagsSource = 1

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<c-l>'
noremap <leader>f :LeaderfSelf<cr>
noremap <leader>fm :LeaderfMru<cr>
noremap <leader>ff :LeaderfFunction<cr>
noremap <leader>fb :LeaderfBufTagAll<cr>
noremap <leader>ft :LeaderfBufTag<cr>
noremap <leader>fl :LeaderfLine<cr>
noremap <leader>fw :LeaderfWindow<cr>

nmap <unique> <leader>fr <Plug>LeaderfRgPrompt
nmap <unique> <leader>fra <Plug>LeaderfRgCwordLiteralNoBoundary
nmap <unique> <leader>frb <Plug>LeaderfRgCwordLiteralBoundary
nmap <unique> <leader>frc <Plug>LeaderfRgCwordRegexNoBoundary
nmap <unique> <leader>frd <Plug>LeaderfRgCwordRegexBoundary

vmap <unique> <leader>fra <Plug>LeaderfRgVisualLiteralNoBoundary
vmap <unique> <leader>frb <Plug>LeaderfRgVisualLiteralBoundary
vmap <unique> <leader>frc <Plug>LeaderfRgVisualRegexNoBoundary
vmap <unique> <leader>frd <Plug>LeaderfRgVisualRegexBoundary

nmap <unique> <leader>fgd <Plug>LeaderfGtagsDefinition
nmap <unique> <leader>fgr <Plug>LeaderfGtagsReference
nmap <unique> <leader>fgs <Plug>LeaderfGtagsSymbol
nmap <unique> <leader>fgg <Plug>LeaderfGtagsGrep

vmap <unique> <leader>fgd <Plug>LeaderfGtagsDefinition
vmap <unique> <leader>fgr <Plug>LeaderfGtagsReference
vmap <unique> <leader>fgs <Plug>LeaderfGtagsSymbol
vmap <unique> <leader>fgg <Plug>LeaderfGtagsGrep

noremap <leader>fgo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fgn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fgp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

"----------------------------------------------------------------------------


if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set t_Co=256
set t_ut=n

set ts=4
set expandtab
set autoindent
set softtabstop=4
set shiftwidth=4
set autoindent
:%retab!

let g:cpp_function_highlight = 1
let g:cpp_attributes_highlight = 1
let g:cpp_member_highlight = 1
let g:cpp_simple_highlight = 1

set noshowmode
"set noruler
set laststatus=2
"set noshowcmd
"set shortmess=F




" syntax on
" colorscheme onedark
" let g:airline_theme='one'
colorscheme one
" let g:space_vim_dark_background = 255
" colorscheme space-vim-dark
" colorscheme monokai
" colorscheme moonfly
" colorscheme zenesque
" colorscheme rainbow_fruit
" colorscheme winter
" colorscheme yeller
" colorscheme xian
" colorscheme winter
" colorscheme vividchalk
" colorscheme papaya
" colorscheme vc
" colorscheme vchalk



"hi Comment cterm=italic
hi Normal     ctermbg=NONE guibg=NONE
hi LineNr     ctermbg=NONE guibg=NONE
hi SignColumn ctermbg=NONE guibg=NONE
" set background=dark " for the dark version
" highlight String ctermbg=NONE ctermfg=107 guibg=NONE guifg=#95B47B
"
"
"
" syntax enable
 set re=1
 set lazyredraw
 set synmaxcol=128
 syntax sync minlines=256

"----------------------------------------------------------------------------
"   Plug 'Yggdroot/indentLine'              indentLine  ¦, ┆, │, ⎸, or ▏
"----------------------------------------------------------------------------
let g:indentLine_enabled = 1
let g:indentLine_setColors = 1
let g:indentLine_color_term = 239
let g:indentLine_char = '⎸'
"let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
let g:indent_guides_start_level           = 2  " 从第二"层开始可视化显示缩进
"----------------------------------------------------------------------------


"----------------------------------------------------------------------------
"   Plug 'dense-analysis/ale'  configure
"----------------------------------------------------------------------------
let g:airline#extensions#ale#enabled = 1
highlight clear signcolumn
let g:ale_linters_explicit = 1
let g:ale_linters = {
\   'csh': ['shell'],
\   'zsh': ['shell'],
\   'go': ['gofmt', 'golint'],
\   'python': ['flake8', 'mypy', 'pylint'],
\   'c': ['gcc', 'cppcheck'],
\   'cpp': ['cc','cppcheck'],
\   'text': [],
\}
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1

let g:ale_sign_error = '->'
let g:ale_sign_warning = '--'
let g:ale_fix_on_save = 1
let g:ale_disable_lsp = 1   " 不用 ale 补全，采用 coc.nvim 来补全


let g:ale_c_cc_executable = '<auto>'          " default
let g:ale_c_cc_options = '-std=c11 -Wall'   " default
let g:ale_c_cppcheck_options = ''

let g:ale_cpp_cc_executable = '<auto>'        " default  first:clang++ then: gcc
let g:ale_cpp_cc_options = '-std=c++11 -Wall' " default
let g:ale_cpp_cppcheck_options = ''
" :ALEInfo for more info

" 格式化
let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'c': ['clang-format'],
\  'cpp': ['clang-format'],
\  'html': ['prettier'],
\  'javascript': ['prettier_standard'],
\  'php': ['php_cs_fixer', 'phpcbf'],
\}
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>
"nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"nmap <silent> <C-j> <Plug>(ale_next_wrap)

"----------------------------------------------------------------------------

" 设置字符集编码，默认使用utf8
set encoding=utf8
set fileencodings=utf8,gb2312,gb18030,ucs-bom,latin1

set noswapfile      " 不使用swp文件，注意，错误退出后无法恢复
set lbr             " 在breakat字符处而不是最后一个字符处断行
set ai              " 自动缩进
set si              " 智能缩进
set cindent         " C/C++风格缩进

" -------------------------------------------------------------------------------

set signcolumn=yes
highlight clear signcolumn

"--------------------------------------------------------------------------------
"    rainbow_active seting
"--------------------------------------------------------------------------------
"\'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
"\'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
\'ctermfgs': ['blue', 'Darkyellow', 'DarkMagenta', 'Darkred'],
\'operators': ['_,\|+\|-\|*\|\/\|=\|==\|&\|===\|!==_'],
\'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\'separately': {
\	'*': {},
\	'tex': {'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],},
\	'lisp': {'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],},
\	'vim': {'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold',
\           'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody',
\           'start=/{/ end=/}/ fold containedin=vimFuncBody'],},
\	'html': {'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],},
\	'css': 0,
\},
\}
"--------------------------------------------------------------------------------
